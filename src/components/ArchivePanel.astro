---
import type { CollectionEntry } from 'astro:content'

interface Props {
  sortedPosts: CollectionEntry<'posts'>[]
}

const { sortedPosts } = Astro.props

// 从 URL 参数获取过滤条件
const url = new URL(Astro.request.url)
console.log(url)

const tags = url.searchParams.getAll('tags')
const categories = url.searchParams.getAll('category')
const uncategorized = url.searchParams.get('uncategorized') === 'true'

// 过滤文章
let filteredPosts = sortedPosts

// 按标签过滤
if (tags.length > 0) {
  filteredPosts = filteredPosts.filter(
    (post) =>
      Array.isArray(post.data.tags) && post.data.tags.some((tag) => tags.includes(tag)),
  )
}

// 按分类过滤
if (categories.length > 0) {
  filteredPosts = filteredPosts.filter(
    (post) => post.data.category && categories.includes(post.data.category),
  )
}

// 过滤未分类文章
if (uncategorized) {
  filteredPosts = filteredPosts.filter((post) => !post.data.category)
}

// 按年份分组
const grouped = filteredPosts.reduce(
  (acc, post) => {
    const year = new Date(post.data.published).getFullYear()
    if (!acc[year]) {
      acc[year] = []
    }
    acc[year].push(post)
    return acc
  },
  {} as Record<number, CollectionEntry<'posts'>[]>,
)

const groups = Object.keys(grouped)
  .map((yearStr) => ({
    year: parseInt(yearStr, 10),
    posts: grouped[parseInt(yearStr, 10)],
  }))
  .sort((a, b) => b.year - a.year)

// 工具函数
function formatDate(date: Date) {
  const month = (date.getMonth() + 1).toString().padStart(2, '0')
  const day = date.getDate().toString().padStart(2, '0')
  return `${month}-${day}`
}

function formatTag(tagList: string[]) {
  return tagList.map((t) => `#${t}`).join(' ')
}
---

<div class="bg-white/5 backdrop-blur-sm border border-white/10 rounded-xl px-8 py-6">
  {
    groups.map((group) => (
      <div key={group.year}>
        <div class="flex flex-row w-full items-center h-[3.75rem]">
          <div class="w-[15%] md:w-[10%] transition text-2xl font-bold text-right text-gray-300">
            {group.year}
          </div>
          <div class="w-[15%] md:w-[10%]">
            <div class="h-3 w-3 bg-none rounded-full border-2 border-blue-500 mx-auto z-50" />
          </div>
          <div class="w-[70%] md:w-[80%] transition text-left text-gray-400">
            {group.posts.length} {group.posts.length === 1 ? 'post' : 'posts'}
          </div>
        </div>

        {group.posts.map((post) => (
          <a
            href={`/posts/${post.slug}`}
            aria-label={post.data.title}
            class="group block h-10 w-full rounded-lg hover:text-white transition-colors"
          >
            <div class="flex flex-row justify-start items-center h-full">
              <div class="w-[15%] md:w-[10%] transition text-sm text-right text-gray-400">
                {formatDate(new Date(post.data.published))}
              </div>

              <div class="w-[15%] md:w-[10%] relative h-full flex items-center">
                <div class="mx-auto w-1 h-1 rounded bg-gray-500 group-hover:h-5 group-hover:bg-blue-500 transition-all border-4 border-transparent group-hover:border-gray-800 z-50" />
              </div>

              <div class="w-[70%] md:max-w-[65%] md:w-[65%] text-left font-bold group-hover:translate-x-1 transition-all group-hover:text-blue-400 text-gray-200 pr-8 whitespace-nowrap overflow-ellipsis overflow-hidden">
                {post.data.title}
              </div>

              <div class="hidden md:block md:w-[15%] text-left text-sm transition whitespace-nowrap overflow-ellipsis overflow-hidden text-gray-500">
                {post.data.tags && formatTag(post.data.tags)}
              </div>
            </div>
          </a>
        ))}
      </div>
    ))
  }
</div>
